import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.sql.Date; // For SQL Date

public class ReservationCalculator extends JFrame {
    private JLabel[] labels = new JLabel[9];
    private JTextField[] fields = new JTextField[9];
    private JLabel totalPriceLabel;

    static {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/hotel_db?useSSL=false&allowPublicKeyRetrieval=true",
            "root", ""
        );
    }

    public ReservationCalculator() {
        setTitle("Hotel Reservation Calculator");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(10, 2, 10, 10));

        addLabels();
        addFields();
        addButton();
        addTotalPriceDisplay();

        setVisible(true);
    }

    private void addLabels() {
        String[] labelNames = {
            "First Name:", "Last Name:", "Email:",
            "Arrival Date:", "Departure Date:", "Room Type:",
            "Adults:", "Children:", "Promo Code:"
        };

        for (int i = 0; i < labelNames.length; i++) {
            JLabel label = new JLabel(labelNames[i]);
            add(label);
            labels[i] = label; // Store in the labels array
        }
    }

    private void addFields() {
        for (int i = 0; i < 9; i++) {
            JTextField field = new JTextField();
            field.setEditable(false);
            fields[i] = field;
            add(field);
        }
        add(totalPriceLabel = new JLabel());
    }

    private void addButton() {
        JButton loadButton = new JButton("Load Last Reservation");
        loadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadLastReservation();
            }
        });
        add(loadButton);
    }

    private void addTotalPriceDisplay() {
        totalPriceLabel.setFont(new Font("Arial", Font.BOLD, 18));
        totalPriceLabel.setForeground(Color.BLUE);
        add(new JLabel()); // Empty space for alignment
    }

    private void loadLastReservation() {
        try (Connection conn = getConnection()) {
            String sql = "SELECT r.*, p.discount FROM reservations r " +
                        "LEFT JOIN promo_codes p ON r.promo_code = p.code " +
                        "ORDER BY id DESC LIMIT 1";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    setFields(rs);
                    double discount = rs.getDouble("discount"); // Ensure discount is retrieved
                    calculateTotalPrice(discount);
                } else {
                    JOptionPane.showMessageDialog(this, "No reservations found!");
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }

    private void setFields(ResultSet rs) throws SQLException {
        // Set labels with reservation data
        labels[0].setText(rs.getString("first_name"));
        labels[1].setText(rs.getString("last_name"));
        labels[2].setText(rs.getString("email"));
        labels[3].setText(rs.getString("arrival_date"));
        labels[4].setText(rs.getString("departure_date"));
        labels[5].setText(rs.getString("room_type")); // Ensure room_type matches exactly
        labels[6].setText(rs.getString("adults"));
        labels[7].setText(rs.getString("children"));
        labels[8].setText(rs.getString("promo_code"));

        // Debug output
        System.out.println("Room Type: " + labels[5].getText());
        System.out.println("Arrival Date: " + labels[3].getText());
        System.out.println("Departure Date: " + labels[4].getText());
    }

    private void calculateTotalPrice(double discount) {
        try (Connection conn = getConnection()) {
            String roomType = labels[5].getText(); // Get room type from the label
            String arrival = labels[3].getText(); // Arrival date
            String departure = labels[4].getText(); // Departure date

            // Get room price
            double basePrice = getRoomPrice(conn, roomType);
            // Calculate nights
            int nights = getNights(arrival, departure);

            // Calculate total price
            double totalPrice = basePrice * nights;
            if (discount > 0) { // Apply discount only if exists
                totalPrice -= (totalPrice * discount) / 100;
            }

            // Update the total price label
            totalPriceLabel.setText("Total: Php." + String.format("%.2f", totalPrice));
        } catch (Exception e) {
            totalPriceLabel.setText("Error calculating price!");
            e.printStackTrace();
        }
    }

    private int getNights(String arrival, String departure) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            dateFormat.setLenient(false); // Enforce strict parsing
            java.util.Date arrivalDate = dateFormat.parse(arrival);
            java.util.Date departureDate = dateFormat.parse(departure);
            long diff = departureDate.getTime() - arrivalDate.getTime();
            return (int) (diff / (24 * 60 * 60 * 1000));
        } catch (Exception e) {
            System.out.println("Date parsing error: " + e.getMessage());
            return 0;
        }
    }

    private double getRoomPrice(Connection conn, String roomType) throws SQLException {
        String sql = "SELECT price_per_night FROM rooms WHERE LOWER(room_type) = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, roomType.trim().toLowerCase()); // Convert to lowercase
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getDouble("price_per_night");
        }
        return 0;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ReservationCalculator::new);
    }
}